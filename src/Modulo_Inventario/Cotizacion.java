/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Modulo_Inventario;

import Excepciones.ExcepcionDatosIncorrectos;
import java.io.File;
import java.io.IOException;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Pattern;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;
import jxl.write.WriteException;

/**
 *
 * @author pc
 */
public class Cotizacion extends javax.swing.JFrame {
    private Connection conexion;
    private JFrame ventanaPadre;
    private boolean hacerVisible;
    private DefaultTableModel modelCafeExistente, modelCotizacion;
    private ArrayList<Integer> listaIDCafe, listaNumeroCafe;
    private Date fechaActual;
    private float totalQuintales, totalPrecio;
    
    /**
     * Creates new form Cotizacion
     */
    public Cotizacion() {
        initComponents();
    }
    public Cotizacion(Connection conexion, JFrame ventanaPadre) {
        initComponents();
        this.conexion = conexion;
        this.ventanaPadre = ventanaPadre;
        hacerVisible = true;
        
        // Obtengo los datos necesarios desde la Base de Datos para poder realizar la cotización
        try {
            Statement sentencia = conexion.createStatement(ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_READ_ONLY);
            ResultSet cConsulta;
            // Obtención del listado de Café que tengan un Saldo > 0 (que se puedan cotizar)
            cConsulta = sentencia.executeQuery("SELECT Id, Nombre, Pergamino, SaldoBodega FROM Cafe WHERE SaldoBodega > 0");
            modelCafeExistente = (DefaultTableModel) tabla_cafe_existente.getModel();
            modelCotizacion = (DefaultTableModel) tabla_cotizacion.getModel();
            listaIDCafe = new ArrayList<>();
            int contador = 0;
            while (cConsulta.next()) {
                listaIDCafe.add(cConsulta.getInt("Id"));
                modelCafeExistente.addRow(new String[]{
                    ""+(++contador),
                    cConsulta.getString("Nombre"),
                    cConsulta.getBoolean("Pergamino") ? "Pergamino" : "Oro",
                    cConsulta.getString("SaldoBodega")
                });
            }
            if (listaIDCafe.isEmpty()) {
                hacerVisible = false;
                JOptionPane.showMessageDialog(this, "No se pueden crear Cotizaciones pues todos no hay Café disponible en Bodega", "Datos faltantes", JOptionPane.INFORMATION_MESSAGE);
                return;
            }
            // Obtengo la fecha de hoy (desde la Base de Datos)
            cConsulta = sentencia.executeQuery("SELECT YEAR(NOW()), MONTH(NOW()), DAY(NOW())");
            cConsulta.next();
            fechaActual = new Date(cConsulta.getInt(1)-1900, cConsulta.getInt(2)-1, cConsulta.getInt(3));
            cot_fecha.setDate(fechaActual);
            
            // Otras configuraciones importantes
            totalQuintales = totalPrecio = 0.0f;
            listaNumeroCafe = new ArrayList<>();
        } catch (SQLException ex) {
            hacerVisible = false;
            JOptionPane.showMessageDialog(this, "No se puede obtener algunos datos desde la Base de Datos.\n\nDescripción:\n"+ex.getMessage(), "Error de conexión", JOptionPane.ERROR_MESSAGE);
//            Logger.getLogger(Cotizacion.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        cot_fecha = new com.toedter.calendar.JDateChooser();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        cot_cliente = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        cot_nit = new javax.swing.JTextField();
        cot_direccion = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        cot_cui = new javax.swing.JTextField();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabla_cotizacion = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane5 = new javax.swing.JScrollPane();
        tabla_cafe_existente = new javax.swing.JTable();
        jLabel7 = new javax.swing.JLabel();
        cot_unidades = new javax.swing.JTextField();
        cot_precio_unidad = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        agregar_producto = new javax.swing.JButton();
        etiqueta_datos_incorrectos = new javax.swing.JLabel();
        eliminar_producto = new javax.swing.JButton();
        exportar_cotizacion = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Cotizaciones");

        cot_fecha.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel2.setText("Fecha:");

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel3.setText("Cliente:");

        cot_cliente.setEditable(false);
        cot_cliente.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        cot_cliente.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                cot_clienteFocusLost(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel4.setText("NIT:");

        cot_nit.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        cot_nit.setToolTipText("");
        cot_nit.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                cot_nitFocusLost(evt);
            }
        });
        cot_nit.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                cot_nitKeyTyped(evt);
            }
        });

        cot_direccion.setEditable(false);
        cot_direccion.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        cot_direccion.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                cot_direccionFocusLost(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel5.setText("Direccion:");

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel6.setText("CUI:");

        cot_cui.setEditable(false);
        cot_cui.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        cot_cui.setToolTipText("");
        cot_cui.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                cot_cuiFocusLost(evt);
            }
        });
        cot_cui.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                cot_cuiKeyTyped(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Detalles de la Cotización:", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 12))); // NOI18N

        tabla_cotizacion.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        tabla_cotizacion.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {"Total qq", "0.0", null, "Total Q.", "0.0"}
            },
            new String [] {
                "No.", "Cantidad", "Descripción", "Precio Unidad", "Precio Total"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tabla_cotizacion.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        jScrollPane1.setViewportView(tabla_cotizacion);
        if (tabla_cotizacion.getColumnModel().getColumnCount() > 0) {
            tabla_cotizacion.getColumnModel().getColumn(0).setPreferredWidth(70);
            tabla_cotizacion.getColumnModel().getColumn(1).setPreferredWidth(100);
            tabla_cotizacion.getColumnModel().getColumn(2).setPreferredWidth(150);
            tabla_cotizacion.getColumnModel().getColumn(3).setPreferredWidth(100);
            tabla_cotizacion.getColumnModel().getColumn(4).setPreferredWidth(125);
        }

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 555, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 249, Short.MAX_VALUE)
        );

        jPanel2.setBackground(new java.awt.Color(153, 153, 255));
        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Café existente:", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 14))); // NOI18N

        tabla_cafe_existente.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        tabla_cafe_existente.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "No.", "Nombre", "Tipo", "Saldo"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tabla_cafe_existente.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        tabla_cafe_existente.setRowHeight(25);
        tabla_cafe_existente.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                tabla_cafe_existenteMousePressed(evt);
            }
        });
        jScrollPane5.setViewportView(tabla_cafe_existente);
        if (tabla_cafe_existente.getColumnModel().getColumnCount() > 0) {
            tabla_cafe_existente.getColumnModel().getColumn(0).setPreferredWidth(40);
            tabla_cafe_existente.getColumnModel().getColumn(1).setPreferredWidth(125);
            tabla_cafe_existente.getColumnModel().getColumn(2).setPreferredWidth(100);
            tabla_cafe_existente.getColumnModel().getColumn(3).setPreferredWidth(125);
        }

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 399, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 156, Short.MAX_VALUE)
        );

        jLabel7.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel7.setText("Unidades:");

        cot_unidades.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N

        cot_precio_unidad.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N

        jLabel8.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel8.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel8.setText("Precio Unidad:");

        agregar_producto.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        agregar_producto.setText("Agregar Producto");
        agregar_producto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                agregar_productoActionPerformed(evt);
            }
        });

        etiqueta_datos_incorrectos.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N

        eliminar_producto.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        eliminar_producto.setText("Eliminar Producto");
        eliminar_producto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                eliminar_productoActionPerformed(evt);
            }
        });

        exportar_cotizacion.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        exportar_cotizacion.setText("Exportar Cotización");
        exportar_cotizacion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportar_cotizacionActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jLabel5)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(cot_direccion, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jLabel4)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(cot_nit, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(jLabel6)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(cot_cui, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(etiqueta_datos_incorrectos))
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jLabel3)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(cot_cliente, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                    .addComponent(jLabel2)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(cot_fecha, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(eliminar_producto))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(jLabel7, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(cot_unidades, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(jLabel8, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(cot_precio_unidad, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(88, 88, 88)
                                .addComponent(agregar_producto))
                            .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(178, 178, 178)
                        .addComponent(exportar_cotizacion)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel7)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(cot_unidades, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel8)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(cot_precio_unidad, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(agregar_producto)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(cot_fecha, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(cot_nit, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel6)
                            .addComponent(cot_cui, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(etiqueta_datos_incorrectos))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(cot_cliente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(cot_direccion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(13, 13, 13)
                        .addComponent(eliminar_producto)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(exportar_cotizacion)
                        .addGap(0, 11, Short.MAX_VALUE))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    /**
     * Cuando el campo del NIT pierde el Focus, se busca el cliente con dicho NIT en la Base de Datos y se muestran sus datos.
     * En caso de que el NIT aún no exista, se habilitan los campos para crearlo.
     * Si el NIT es incorrecto simplemente no se realizará la búsqueda y se mostrará en la etiqueta la razón del error.
     * @param evt 
     */
    private void cot_nitFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cot_nitFocusLost
        if (!Pattern.compile("\\d{7}-\\d{1}").matcher(String.valueOf(cot_nit.getText())).matches()) {
            etiqueta_datos_incorrectos.setText("Número de NIT incorrecto");
        } else {
            etiqueta_datos_incorrectos.setText("");
            buscar_cliente(cot_nit.getText());
        }
    }//GEN-LAST:event_cot_nitFocusLost

    private void tabla_cafe_existenteMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tabla_cafe_existenteMousePressed
        cargar_saldo_cafe(tabla_cafe_existente.getSelectedRow());
    }//GEN-LAST:event_tabla_cafe_existenteMousePressed

    private void agregar_productoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_agregar_productoActionPerformed
        int index = tabla_cafe_existente.getSelectedRow();
        if (Float.parseFloat((String) tabla_cafe_existente.getValueAt(index, 3)) == 0) {
            JOptionPane.showMessageDialog(this, "Este Café pues ya no tiene existencias", "Sin producto", JOptionPane.ERROR_MESSAGE);
            return;
        }
        try {
            validar_seleccion();    // Evalúo que los datos sean correctos
            float quintalesSelec = Float.parseFloat(cot_unidades.getText()), precioSelec = Float.parseFloat(cot_precio_unidad.getText());
            totalQuintales+= quintalesSelec;
            totalPrecio+= quintalesSelec * precioSelec;
            // Agrego los datos de la selección a la 'tabla_cotizacion'
            modelCotizacion.addRow(new String[]{
                "Total qq",
                ""+totalQuintales,
                "",
                "Total Q.",
                ""+totalPrecio
            });
            
            int lineaNueva = tabla_cotizacion.getRowCount()-3;
            tabla_cotizacion.setValueAt(""+(lineaNueva+1), lineaNueva, 0);
            tabla_cotizacion.setValueAt(cot_unidades.getText(), lineaNueva, 1);
            tabla_cotizacion.setValueAt(((String)tabla_cafe_existente.getValueAt(index, 1)+" ("+(String)tabla_cafe_existente.getValueAt(index, 2)+")"), lineaNueva, 2);
            tabla_cotizacion.setValueAt(cot_precio_unidad.getText(), lineaNueva, 3);
            tabla_cotizacion.setValueAt(""+(quintalesSelec * precioSelec), lineaNueva, 4);
            for(int i=0; i<tabla_cotizacion.getColumnCount(); i++) {
                tabla_cotizacion.setValueAt("", lineaNueva+1, i);
            }
            // Resto la Cantidad de Quintales seleccionados
            tabla_cafe_existente.setValueAt(""+(Float.parseFloat((String)tabla_cafe_existente.getValueAt(index, 3))-quintalesSelec), index, 3);
            listaNumeroCafe.add(index); // Agrego la referencia del Café que se agregó a la cotización
            // Borro los campos donde se ingresó Cantidad y Precio
            cot_unidades.setText("");
            cot_precio_unidad.setText("");
        } catch (ExcepcionDatosIncorrectos ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error en datos", JOptionPane.ERROR_MESSAGE);
//            Logger.getLogger(Cotizacion.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_agregar_productoActionPerformed

    private void eliminar_productoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_eliminar_productoActionPerformed
        int index = tabla_cotizacion.getSelectedRow();
        int contFil = tabla_cotizacion.getRowCount(), contCol = tabla_cotizacion.getColumnCount(), fil, col;
        if (index > -1 && index < (contFil-2)) {
            // Regreso el Saldo del café que se va a eliminar
            float saldoAnterior = Float.parseFloat((String)tabla_cafe_existente.getValueAt(listaNumeroCafe.get(index), 3));
            float saldoEliminar = Float.parseFloat((String)tabla_cotizacion.getValueAt(index, 1));
            float precioEliminar = Float.parseFloat((String)tabla_cotizacion.getValueAt(index, 4));
            tabla_cafe_existente.setValueAt(""+(saldoAnterior + saldoEliminar), listaNumeroCafe.get(index), 3);
            totalQuintales-= saldoEliminar;
            totalPrecio-= precioEliminar;
            tabla_cotizacion.setValueAt(""+totalQuintales, contFil-1, 1);
            tabla_cotizacion.setValueAt(""+totalPrecio, contFil-1, 4);
            
            // Elimino la fila de la Tabla Cotizacion (desplazando una fila hacia arriba las filas que le siguien)
            for(fil=index+1; fil<contFil; fil++)
                for(col=0; col<contCol; col++)
                    tabla_cotizacion.setValueAt((String)tabla_cotizacion.getValueAt(fil, col), fil-1, col);
            modelCotizacion.setRowCount(contFil-1); // Acorto la tabla (eliminando la última fila)
            // Elimino el indicador del Número de Cafe referenciado en el ArrayList
            listaNumeroCafe.remove(index);
            // Esto debido a los pequeños residuos decimales
            if (tabla_cotizacion.getRowCount() == 2) {
                tabla_cotizacion.setValueAt("0.0", 1, 1);
                tabla_cotizacion.setValueAt("0.0", 1, 4);
            }
        }
    }//GEN-LAST:event_eliminar_productoActionPerformed

    private void exportar_cotizacionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportar_cotizacionActionPerformed
        Calendar fecha = cot_fecha.getCalendar();
        int contFil = tabla_cotizacion.getRowCount(), contCol = tabla_cotizacion.getColumnCount(), fil, col;
        try {
            validar_datos_cliente();    // Verifico que los datos del Cliente que pide la Cotización sean correctos
            // La información del cliente se agrega como encabezado del archivo a generar
            javax.swing.JTable miTabla = new javax.swing.JTable();
            miTabla.setModel(new javax.swing.table.DefaultTableModel(
                new Object [contFil + 8][contCol],
                new String [] { "No.", "Quintales", "Descripción", "Precio por Quintal", "Precio Total" }
            ));
//            javax.swing.JScrollPane miScroll = new javax.swing.JScrollPane();
//            miScroll.setViewportView(miTabla);    // En caso de querer mostrarlo en un JOptionPane (pasarle miScroll)
            
            // Agregación del Encabezado
            miTabla.setValueAt("Fecha", 0, 0);      miTabla.setValueAt(""+fecha.get(Calendar.DAY_OF_MONTH)+"/"+(fecha.get(Calendar.MONTH)+1)+"/"+fecha.get(Calendar.YEAR), 0, 1);
            miTabla.setValueAt("NIT", 1, 0);        miTabla.setValueAt(cot_nit.getText(), 1, 1);
            miTabla.setValueAt("CUI", 2, 0);        miTabla.setValueAt(cot_cui.getText(), 2, 1);
            miTabla.setValueAt("Cliente", 3, 0);    miTabla.setValueAt(cot_cliente.getText(), 3, 1);
            miTabla.setValueAt("Direccion", 4, 0);  miTabla.setValueAt(cot_direccion.getText(), 4, 1);
            miTabla.setValueAt("Detalle de la Cotización:", 6, 0);
            // Copio el Encabezado de la Tabla Cotización
            for(col=0; col<contCol; col++)
                miTabla.setValueAt(tabla_cotizacion.getColumnName(col), 7, col);
            // Copio todos los datos de la Tabla Cotización
            for(fil=0; fil<contFil; fil++)
                for(col=0; col<contCol; col++)
                    miTabla.setValueAt((String)tabla_cotizacion.getValueAt(fil, col), fil+8, col);
            // Se procede a Exportar la Cotización a un archivo de Excel (.xls)
            JFileChooser chooser = new JFileChooser();
            FileNameExtensionFilter filtro = new FileNameExtensionFilter("Archivos de excel (*.xls)","xls");
            chooser.setFileFilter(filtro);
            chooser.setDialogTitle("Guardar archivo");
            chooser.setMultiSelectionEnabled(false);
            chooser.setAcceptAllFileFilterUsed(false);
            int opcion = chooser.showSaveDialog(this);
            if (opcion == JFileChooser.APPROVE_OPTION) {
                String nombreArchivo = chooser.getSelectedFile().toString();
                ExportarAExcel.exportar_tabla(new File(nombreArchivo+".xls"), miTabla, "Cliente "+cot_cliente.getName(), false);
                JOptionPane.showMessageDialog(this, "Archivo '"+chooser.getSelectedFile().getName()+".xls' creado con éxito.", "Información", JOptionPane.INFORMATION_MESSAGE);
            }
        } catch (ExcepcionDatosIncorrectos ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error en datos", JOptionPane.ERROR_MESSAGE);
//            Logger.getLogger(Cotizacion.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException | WriteException ex) {
            JOptionPane.showMessageDialog(this, "Ocurrió un error al intentar crear el archivo.\n\nDescripción:\n"+ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
//            Logger.getLogger(Cotizacion.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_exportar_cotizacionActionPerformed

    private void cot_cuiFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cot_cuiFocusLost
        etiqueta_datos_incorrectos.setText(!Pattern.compile("\\d{13}").matcher(String.valueOf(cot_cui.getText())).matches() ? "Número de CUI incorrecto" : "");
    }//GEN-LAST:event_cot_cuiFocusLost

    private void cot_clienteFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cot_clienteFocusLost
        etiqueta_datos_incorrectos.setText((cot_cliente.getText().length()==0) ? "Cliente no especificado" : "");
    }//GEN-LAST:event_cot_clienteFocusLost

    private void cot_direccionFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cot_direccionFocusLost
        etiqueta_datos_incorrectos.setText((cot_direccion.getText().length()==0) ? "Dirección no especificada" : "");
    }//GEN-LAST:event_cot_direccionFocusLost

    private void cot_nitKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cot_nitKeyTyped
        char tecla = evt.getKeyChar();
        int cantidad = cot_nit.getText().length();
        if (cantidad < 6) {
            if (!Pattern.compile("\\d").matcher(String.valueOf(tecla)).matches())
                evt.consume();
        } else if (cantidad == 7) {
            if (tecla != '-')
                evt.consume();
        } else if (cantidad < 9) {
            if (!Pattern.compile("\\d").matcher(String.valueOf(tecla)).matches())
                evt.consume();
        } else {
            evt.consume();
        }
    }//GEN-LAST:event_cot_nitKeyTyped

    private void cot_cuiKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cot_cuiKeyTyped
        if (!Pattern.compile("\\d").matcher(String.valueOf(evt.getKeyChar())).matches() || cot_cui.getText().length() == 13)
            evt.consume();
    }//GEN-LAST:event_cot_cuiKeyTyped

    private void buscar_cliente(String NIT) {
        try {
            // Obtención de los datos del Cliente con el NIT = 'NIT'
            Statement sentencia = conexion.createStatement(ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_READ_ONLY);
            ResultSet cConsulta = sentencia.executeQuery("SELECT CUI, Nombre, Direccion FROM Proveedores WHERE NIT = '"+NIT+"'");
            if (cConsulta.next()) {
                cot_cui.setText(cConsulta.getString("CUI"));
                cot_cliente.setText(cConsulta.getString("Nombre"));
                cot_direccion.setText(cConsulta.getString("Direccion"));
                cot_cui.setEditable(false);
                cot_cliente.setEditable(false);
                cot_direccion.setEditable(false);
            } else {
                cot_cui.setText("");
                cot_cliente.setText("");
                cot_direccion.setText("");
                cot_cui.setEditable(true);
                cot_cliente.setEditable(true);
                cot_direccion.setEditable(true);
            }
        } catch (SQLException ex) {
//            Logger.getLogger(Cotizacion.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    private void cargar_saldo_cafe(int index) {
        if (index == -1) {
            cot_unidades.setText("");
            cot_precio_unidad.setText("");
        } else {
            cot_unidades.setText((String) tabla_cafe_existente.getValueAt(index, 3));
            cot_precio_unidad.setText("0.0");
        }
    }
    private void validar_seleccion() throws ExcepcionDatosIncorrectos {
        int index = tabla_cafe_existente.getSelectedRow();
        if (cot_unidades.getText().length() == 0)
            throw new ExcepcionDatosIncorrectos("Especifique la Cantidad de Quintales a tomar del Café seleccionado");
        try {
            if (Float.parseFloat(cot_unidades.getText()) <= 0.0f)
                throw new ExcepcionDatosIncorrectos("La Cantidad de Quintales debe ser mayor a cero");
        } catch(NumberFormatException ex) {
            throw new ExcepcionDatosIncorrectos("La Cantidad de Quintales debe ser numérico");
        }
        if (Float.parseFloat(cot_unidades.getText()) > Float.parseFloat((String)tabla_cafe_existente.getValueAt(index, 3)))
            throw new ExcepcionDatosIncorrectos("No puede elegir más Quintales de Café del que existe en el seleccionado");
        if (cot_precio_unidad.getText().length() == 0)
            throw new ExcepcionDatosIncorrectos("Especifique el Precio por Quintal del Café seleccionado");
        try {
            if (Float.parseFloat(cot_precio_unidad.getText()) <= 0.0f)
                throw new ExcepcionDatosIncorrectos("El Precio por Quintal debe ser mayor a cero");
        } catch(NumberFormatException ex) {
            throw new ExcepcionDatosIncorrectos("El Precio por Quintal debe ser numérico");
        }
    }
    private void validar_datos_cliente() throws ExcepcionDatosIncorrectos {
        if (cot_fecha.getDate() == null)
            throw new ExcepcionDatosIncorrectos("Especifique la Fecha de esta Cotización");
        if (cot_nit.getText().length() != 9)
            throw new ExcepcionDatosIncorrectos("El NIT del Cliente es incorrecto");
        if (cot_cui.getText().length() != 13)
            throw new ExcepcionDatosIncorrectos("El CUI del Cliente es incorrecto");
        if (cot_cliente.getText().length() == 0)
            throw new ExcepcionDatosIncorrectos("Especifique el Cliente de esta Cotización");
        if (cot_direccion.getText().length() == 0)
            throw new ExcepcionDatosIncorrectos("Especifique la Dirección del Cliente de esta Cotización");
    }
    public boolean getHacerVisible() { return hacerVisible; }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Cotizacion.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Cotizacion().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton agregar_producto;
    private javax.swing.JTextField cot_cliente;
    private javax.swing.JTextField cot_cui;
    private javax.swing.JTextField cot_direccion;
    private com.toedter.calendar.JDateChooser cot_fecha;
    private javax.swing.JTextField cot_nit;
    private javax.swing.JTextField cot_precio_unidad;
    private javax.swing.JTextField cot_unidades;
    private javax.swing.JButton eliminar_producto;
    private javax.swing.JLabel etiqueta_datos_incorrectos;
    private javax.swing.JButton exportar_cotizacion;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JTable tabla_cafe_existente;
    private javax.swing.JTable tabla_cotizacion;
    // End of variables declaration//GEN-END:variables
}
