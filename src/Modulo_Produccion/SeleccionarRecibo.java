/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Modulo_Produccion;

import Excepciones.ExcepcionDatosIncorrectos;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 * Ventana que permite seleccionar UN Recibo que aún tenga un Saldo > 0 para ser agregado a una Orden de Trilla. De hecho, se
 * guardan en varias variables los datos importantes del Recibo seleccionado para ser utilizados desde la ventana que lo llama.
 * En caso de no seleccionar un registro (por un cierre forzado de esta ventana), el valor de this.getIdRecibo() será -1.
 * @author Wilson Xicará
 */
public class SeleccionarRecibo extends javax.swing.JDialog {
    private Connection conexion;
    private ArrayList<String> listaCosechas;
    private ArrayList<Integer> listaIDCosehas, listaIDRecibos;
    private DefaultTableModel modelRecibosDisponibles;
    private boolean cosechasCargadas;
    // Datos del Recibo que se seleccionará
    private int idRecibo, numeroRecibo, cantidadSacosNylon, cantidadSacosYuta;
    private String productor;
    private float cantidadQuintales;
    
    /**
     * Creates new form SeleccionarRecibo
     */
    public SeleccionarRecibo(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
    }
    public SeleccionarRecibo(java.awt.Frame parent, boolean modal, Connection conexion, ArrayList<String> listaCosechas, ArrayList<Integer> listaIDCosechas) {
        super(parent, modal);
        initComponents();
        this.conexion = conexion;
        this.listaCosechas = listaCosechas;
        this.listaIDCosehas = listaIDCosechas;
        listaIDRecibos = new ArrayList<>();
        cosechasCargadas = false;   // Indicador que permite activar el evento del JComboBox 'cosechas'
        modelRecibosDisponibles = (DefaultTableModel)tabla_recibos_disponibles.getModel();
        
        // Muestro el listado de Cosechas del que se pueden hacer búsquedas
        int cantidad = listaCosechas.size();
        for (int i=0; i<cantidad; i++)
            cosechas.addItem(listaCosechas.get(i));
        cosechas.addItem("Todas las cosechas"); // Opción que permitirá mostrar todos los Recibos con Saldo > 0
        cosechas.setSelectedIndex(-1);  // Inicialmente no se mostrará ningún Recibo
        cosechasCargadas = true;
        
        idRecibo = -1;  // Indicador de que no se ha seleccionado un Recibo
        this.setLocationRelativeTo(null);   // Para centrar esta ventana sobre la pantalla.
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panel_recibos_disponibles = new javax.swing.JPanel();
        jScrollPane6 = new javax.swing.JScrollPane();
        tabla_recibos_disponibles = new javax.swing.JTable();
        seleccionar_recibo = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();
        cosechas = new javax.swing.JComboBox<>();
        jLabel12 = new javax.swing.JLabel();
        cantidad_sacos_nylon = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        cantidad_quintales = new javax.swing.JTextField();
        jLabel14 = new javax.swing.JLabel();
        cantidad_sacos_yuta = new javax.swing.JTextField();
        jLabel15 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Selección de Recibo");

        panel_recibos_disponibles.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Recibos disponibles:", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 14))); // NOI18N
        panel_recibos_disponibles.setToolTipText("");

        tabla_recibos_disponibles.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        tabla_recibos_disponibles.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Recibo No.", "Cosecha", "Productor", "Café", "Fecha", "Número de envío", "Peso total", "Saldo actual", "No. Sacos Nylon", "No. Sacos Yuta"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tabla_recibos_disponibles.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        tabla_recibos_disponibles.setRowHeight(25);
        tabla_recibos_disponibles.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                tabla_recibos_disponiblesMousePressed(evt);
            }
        });
        jScrollPane6.setViewportView(tabla_recibos_disponibles);

        seleccionar_recibo.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        seleccionar_recibo.setText("Seleccionar recibo");
        seleccionar_recibo.setEnabled(false);
        seleccionar_recibo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                seleccionar_reciboActionPerformed(evt);
            }
        });

        jLabel8.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel8.setText("Cosecha:");

        cosechas.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        cosechas.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cosechasItemStateChanged(evt);
            }
        });

        jLabel12.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel12.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel12.setText("Sacos Nylon:");

        cantidad_sacos_nylon.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        cantidad_sacos_nylon.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        cantidad_sacos_nylon.setEnabled(false);

        jLabel13.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel13.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel13.setText("Quintales a utilizar:");

        cantidad_quintales.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        cantidad_quintales.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        cantidad_quintales.setEnabled(false);

        jLabel14.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel14.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel14.setText("Sacos Yuta:");

        cantidad_sacos_yuta.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        cantidad_sacos_yuta.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        cantidad_sacos_yuta.setEnabled(false);

        jLabel15.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel15.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel15.setText("Detalles de la selección");

        javax.swing.GroupLayout panel_recibos_disponiblesLayout = new javax.swing.GroupLayout(panel_recibos_disponibles);
        panel_recibos_disponibles.setLayout(panel_recibos_disponiblesLayout);
        panel_recibos_disponiblesLayout.setHorizontalGroup(
            panel_recibos_disponiblesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane6)
            .addGroup(panel_recibos_disponiblesLayout.createSequentialGroup()
                .addComponent(jLabel8)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cosechas, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(panel_recibos_disponiblesLayout.createSequentialGroup()
                .addGroup(panel_recibos_disponiblesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jLabel15, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(panel_recibos_disponiblesLayout.createSequentialGroup()
                        .addGroup(panel_recibos_disponiblesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(cantidad_sacos_nylon, javax.swing.GroupLayout.DEFAULT_SIZE, 100, Short.MAX_VALUE)
                            .addComponent(jLabel12, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(panel_recibos_disponiblesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(cantidad_sacos_yuta, javax.swing.GroupLayout.DEFAULT_SIZE, 100, Short.MAX_VALUE)
                            .addComponent(jLabel14, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(panel_recibos_disponiblesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(cantidad_quintales, javax.swing.GroupLayout.DEFAULT_SIZE, 125, Short.MAX_VALUE)
                            .addComponent(jLabel13, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addGap(63, 63, 63)
                .addComponent(seleccionar_recibo)
                .addGap(0, 209, Short.MAX_VALUE))
        );
        panel_recibos_disponiblesLayout.setVerticalGroup(
            panel_recibos_disponiblesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel_recibos_disponiblesLayout.createSequentialGroup()
                .addGroup(panel_recibos_disponiblesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(cosechas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane6, javax.swing.GroupLayout.DEFAULT_SIZE, 217, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(jLabel15)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panel_recibos_disponiblesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel12)
                    .addComponent(jLabel14)
                    .addComponent(jLabel13))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panel_recibos_disponiblesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cantidad_sacos_nylon, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cantidad_sacos_yuta, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cantidad_quintales, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(seleccionar_recibo))
                .addContainerGap(27, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(panel_recibos_disponibles, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(panel_recibos_disponibles, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cosechasItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cosechasItemStateChanged
        int index = cosechas.getSelectedIndex();
        if (cosechasCargadas && index != -1) {
            // Se hará una consulta a la Base de Datos para obtener todos los Recibos que tengan Saldo > 0
            listaIDRecibos.clear();
            modelRecibosDisponibles.setRowCount(0);
            try {
                Statement sentencia = conexion.createStatement(ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_READ_ONLY);
                ResultSet cRecibos = sentencia.executeQuery("SELECT Recibo.Id idRecibo, Recibo.Numero numeroRecibo, CONCAT(Cosecha.Nombre, ' (', Cosecha.Fecha_fin, '-', Cosecha.Fecha_inicio, ')') nombreCosecha, Productor.Nombre nombreProductor, CONCAT(Cafe.Nombre, ' (Pergamino)') nombreCafe, Recibo.Fecha, Recibo.NumEnvio, Recibo.Peso, Recibo.SacosNylon, Recibo.SacosYuta, Recibo.Saldo FROM Recibo "
                    + "INNER JOIN Cosecha ON Recibo.Cosecha_Id = Cosecha.Id "
                    + "INNER JOIN Productor ON Recibo.Productor_Id = Productor.Id "
                    + "INNER JOIN Cafe ON Recibo.Cafe_Id = Cafe.Id "
                    + "WHERE "+(index!=(cosechas.getItemCount()-1)?"Recibo.Cosecha_Id = "+listaIDCosehas.get(index)+" AND ":"")+"Recibo.Saldo > 0");

                // Inicio la extracción y muestra de datos en la tabla correspondiente
                while (cRecibos.next()) {
                    listaIDRecibos.add(cRecibos.getInt("idRecibo"));
                    modelRecibosDisponibles.addRow(new String[]{
                        cRecibos.getString("numeroRecibo"),
                        cRecibos.getString("nombreCosecha"),
                        cRecibos.getString("nombreProductor"),
                        cRecibos.getString("nombreCafe"),
                        cRecibos.getString("Fecha"),
                        cRecibos.getString("NumEnvio"),
                        cRecibos.getString("Peso"),
                        cRecibos.getString("Saldo"),
                        cRecibos.getString("SacosNylon"),
                        cRecibos.getString("SacosYuta")});
                }   // Hasta aquí se garantiza la carga de todos los Recibos con Saldo > 0 de la cosecha seleccionada
                
                cantidad_sacos_nylon.setEnabled(false); // Estos campos se habilitarán hasta seleccionar un registro
                cantidad_sacos_yuta.setEnabled(false);
                cantidad_quintales.setEnabled(false);
                seleccionar_recibo.setEnabled(false);   // Este botón se habilitará hasta seleccionar un registro
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(this, "Error al intentar obtener el listado de Recibos.\n\nDescripción:\n"+ex.getMessage(), "Error de conexión", JOptionPane.ERROR_MESSAGE);
//                Logger.getLogger(SeleccionarRecibo.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_cosechasItemStateChanged

    private void tabla_recibos_disponiblesMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tabla_recibos_disponiblesMousePressed
        int rango[] = tabla_recibos_disponibles.getSelectedRows();
        if (rango.length == 1) {
            cantidad_sacos_nylon.setEnabled(true);
            cantidad_sacos_yuta.setEnabled(true);
            cantidad_quintales.setEnabled(true);
            seleccionar_recibo.setEnabled(true);    // Habilito el botón para seleccionar uno de los Recibos
            // Cargo los datos del registro seleccionado, mostrados en la tabla, en los campos correspondientes
            cantidad_sacos_nylon.setText((String)tabla_recibos_disponibles.getValueAt(rango[0], 8));
            cantidad_sacos_yuta.setText((String)tabla_recibos_disponibles.getValueAt(rango[0], 9));
            cantidad_quintales.setText((String)tabla_recibos_disponibles.getValueAt(rango[0], 7));
        }
    }//GEN-LAST:event_tabla_recibos_disponiblesMousePressed

    private void seleccionar_reciboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_seleccionar_reciboActionPerformed
        int rango[] = tabla_recibos_disponibles.getSelectedRows();
        if (rango.length == 1) {
            try {
                // Evalúo que si los datos fueron cambiados, sean correctos (menores o iguales)
                validar_datos_registro_seleccioando(rango[0]);
                // Cargo los datos importantes del Registro seleccionado a las variables correspondientes
                idRecibo = listaIDRecibos.get(rango[0]);
                numeroRecibo = Integer.parseInt((String)tabla_recibos_disponibles.getValueAt(rango[0], 0));
                cantidadSacosNylon = Integer.parseInt(cantidad_sacos_nylon.getText());
                cantidadSacosYuta = Integer.parseInt(cantidad_sacos_yuta.getText());
                cantidadQuintales = Float.parseFloat(cantidad_quintales.getText());
                productor = (String)tabla_recibos_disponibles.getValueAt(rango[0], 2);
                
                // Cierro esta ventana para retornar a la anterior el 'recibo seleccionado'
                this.dispose();
            } catch (ExcepcionDatosIncorrectos ex) {
                JOptionPane.showMessageDialog(this, ex.getMessage(), "Error en datos", JOptionPane.ERROR_MESSAGE);
//                Logger.getLogger(SeleccionarRecibo.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            JOptionPane.showMessageDialog(this, "Seleccione sólo un registro", "Aviso", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_seleccionar_reciboActionPerformed

    private void validar_datos_registro_seleccioando(int reciboSelec) throws ExcepcionDatosIncorrectos {
        if (Integer.parseInt(cantidad_sacos_nylon.getText()) > Integer.parseInt((String)tabla_recibos_disponibles.getValueAt(reciboSelec, 8)))
            throw new ExcepcionDatosIncorrectos("La Cantidad de Sacos de Nylon no puede ser mayor del mostrado en el Recibo");
        if (Integer.parseInt(cantidad_sacos_yuta.getText()) > Integer.parseInt((String)tabla_recibos_disponibles.getValueAt(reciboSelec, 9)))
            throw new ExcepcionDatosIncorrectos("La Cantidad de Sacos de Yuta no puede ser mayor del mostrado en el Recibo");
        if (Float.parseFloat(cantidad_quintales.getText()) > Float.parseFloat((String)tabla_recibos_disponibles.getValueAt(reciboSelec, 7)))
            throw new ExcepcionDatosIncorrectos("La Cantidad de Quintales no puede ser mayor del mostrado en el Recibo");
    }
    public int getIdRecibo() { return idRecibo; }
    public int getNumeroRecibo() { return numeroRecibo; }
    public int getCantidadSacosNylon() { return cantidadSacosNylon; }
    public int getCantidadSacosYuta() { return cantidadSacosYuta; }
    public String getProductor() { return productor; }
    public float getCantidadQuintales() { return cantidadQuintales; }

    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SeleccionarRecibo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                SeleccionarRecibo dialog = new SeleccionarRecibo(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField cantidad_quintales;
    private javax.swing.JTextField cantidad_sacos_nylon;
    private javax.swing.JTextField cantidad_sacos_yuta;
    private javax.swing.JComboBox<String> cosechas;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JPanel panel_recibos_disponibles;
    private javax.swing.JButton seleccionar_recibo;
    private javax.swing.JTable tabla_recibos_disponibles;
    // End of variables declaration//GEN-END:variables
}
